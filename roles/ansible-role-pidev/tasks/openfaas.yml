---
- name: this block contains tasks related to openfaas
  block:
    - name: get current zones associated with internal zone
      shell: "firewall-cmd --zone=internal --list-interfaces"
      changed_when: false
      register: internal_interfaces

    - name: get list of all enabled services on firewall internal zone
      shell: "firewall-cmd --zone=internal --list-services"
      changed_when: false
      register: get_fw_internal_services

    - name: get list of all enabled ports on firewall internal zone
      shell: "firewall-cmd --zone=internal --list-ports"
      changed_when: false
      register: get_fw_internal_ports

    - name: get list of all enabled ports on firewall public zone
      shell: "firewall-cmd --list-ports"
      changed_when: false
      register: get_fw_default_ports

    - name: ensure required ports enabled on internal firewall zone
      shell: "firewall-cmd --permanent --zone=internal --add-port={{ item }}"
      when: item not in get_fw_internal_ports.stdout
      with_items:
        - "80/tcp"
        - "7946/tcp"
        - "4789/tcp"
        - "2376/tcp"
        - "2376/tcp"
        - "2377/tcp"
        - "8080/tcp"
        - "9000/tcp"
      notify:
        - reload firewalld
        - restart docker

    - name: ensure required ports enabled on default firewall zone
      shell: "firewall-cmd --permanent --add-port={{ item }}"
      when: item not in get_fw_default_ports.stdout
      with_items:
        - "80/tcp"
        - "7946/tcp"
        - "4789/tcp"
        - "2376/tcp"
        - "2376/tcp"
        - "2377/tcp"
        - "8080/tcp"
        - "9000/tcp"
      notify:
        - reload firewalld
        - restart docker

    - meta: flush_handlers

    - name: determine public ip address of node
      shell: "curl -s ipv4.icanhazip.com"
      register: icanhazip
      changed_when: false

    - name: ensure docker swarm is initialized
      docker_swarm:
        state: "present"
        advertise_addr: "{{ icanhazip.stdout }}"
      register: swarm_init

    - name: ensure latest versions of openfaas/faas repo has been git cloned
      git:
        repo: "https://github.com/openfaas/faas.git"
        dest: "{{ pidev_user.homedir }}/openfaas/faas/"
        clone: "yes"
        force: "yes"
      become: true
      become_user: "{{ pidev_user.name }}"
      become_method: "su"

    - name: ensure manage_docker_secrets script is in path
      copy:
        src: "files/manage_docker_secrets.sh"
        dest: "/usr/local/bin/manage_docker_secrets"
        owner: "root"
        group: "root"
        mode: "0755"

    - name: ensure minio docker secrets are generated and stored
      shell: "manage_docker_secrets add {{ item }}"
      args:
        chdir: "{{ pidev_user.homedir }}"
        executable: "/bin/bash"
        creates: "{{ pidev_user.homedir }}/{{ item }}.docker_secret.txt"
      become: true
      become_user: "{{ pidev_user.name }}"
      become_method: "sudo"
      loop:
        - access_key
        - secret_key

    - name: ensure minio settings are referenced in openfaas/faas docker-compose.yml file
      yedit:
        src: "{{ pidev_user.homedir }}/openfaas/faas/docker-compose.yml"
        key: "{{ item.key }}"
        value: "{{ item.value }}"
      become: true
      become_user: "{{ pidev_user.name }}"
      become_method: "sudo"
      loop:
        - { key: secrets.access_key.external, value: "true" }
        - { key: secrets.secret_key.external, value: "true" }
        - { key: services.minio.deploy.restart_policy.delay, value: "10s" }
        - { key: services.minio.deploy.restart_policy.max_attempts, value: "10" }
        - { key: services.minio.deploy.restart_policy.window, value: "60s" }
        - { key: services.minio.hostname, value: "minio" }
        - { key: services.minio.image, value: "minio/minio:RELEASE.2019-04-23T23-50-36Z" }
        - { key: services.minio.networks, value: ["functions"] }
        - { key: services.minio.ports, value: ["9000:9000"] }
        - { key: services.minio.command, value: "server /export" }
        - { key: services.minio.secrets, value: ["secret_key", "access_key"] }
        - { key: services.minio.volumes, value: ["minio_data:/export"] }
        - { key: volumes.minio_data.driver, value: "local" }

    - name: ensure poc openfaas docker swarm based installation is deployed/updated (not idempotent)
      shell: "./deploy_stack.sh --no-auth"
      args:
        chdir: "{{ pidev_user.homedir }}/openfaas/faas/"
      become: true
      become_user: "{{ pidev_user.name}}"
      become_method: "su"
      register: faas_deploy
      failed_when: false

    - name: check faas-cli version (before upgrade/install attempt)
      shell: "faas-cli version"
      register: faas_cli_vers_before
      changed_when: false
      failed_when: false

    - name: ensure faas-cli is installed and updated
      shell: "curl -sL https://cli.openfaas.com | bash"
      changed_when: false

    - name: check faas-cli version (after upgrade/install attempt)
      shell: "faas-cli version"
      register: faas_cli_vers_after
      changed_when: false
      failed_when: false

    - name: check faas-cli version (before upgrade/install attempt)
      debug:
        msg: "faas-cli was installed/updated."
      when: faas_cli_vers_before == faas_cli_vers_after

  tags:
    - openfaas
...
